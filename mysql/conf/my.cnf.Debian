{%- from "mysql/map.jinja" import server with context %}
{%- from "mysql/map.jinja" import cluster with context %}
{%- if cluster.enabled %}

{%- if server.force_encoding is defined %}
[client]
default-character-set=utf8
{%- endif %}
####################################################################################################################################################
# This file contains wsrep-related mysqld options. It should be included
# in the main MySQL configuration file.
#
# Options that need to be customized:
#  - wsrep_provider
#  - wsrep_cluster_address
#  - wsrep_sst_auth
# The rest of defaults should work out of the box.

##
## mysqld options _MANDATORY_ for correct opration of the cluster
##
[mysqld]

{%- if server.force_encoding is defined %}
character-set-server=utf8
collation-server=utf8_general_ci 
{%- endif %}

# (This must be substituted by wsrep_format)
binlog_format=ROW

# Currently only InnoDB storage engine is supported
default-storage-engine=innodb

# to avoid issues with 'bulk mode inserts' using autoinc
innodb_autoinc_lock_mode=2

# This is a must for paralell applying
innodb_locks_unsafe_for_binlog=1
#INNODB
default-storage-engine=innodb
engine-condition-pushdown=1
innodb_data_file_path = ibdata1:100M:autoextend
innodb_log_file_size=128M #1024M
innodb_log_files_in_group=2
innodb_log_buffer_size=8M #96M
innodb_stats_on_metadata=0
innodb_autoinc_lock_mode=2
innodb_locks_unsafe_for_binlog=1
innodb_flush_method=O_DIRECT
innodb_thread_concurrency=8 #0 #64
innodb_doublewrite=1
innodb_io_capacity=200 #2000
innodb_write_io_threads=4 #40
innodb_read_io_threads=4 #40
innodb_file_per_table=1
innodb_flush_log_at_trx_commit=2
innodb_additional_mem_pool_size=100M #1000M
innodb_buffer_pool_size=1G #9211M
innodb_buffer_pool_instances=8
innodb_rollback_on_timeout=ON
innodb_lock_wait_timeout=10
auto_increment_increment=3
auto_increment_offset=10

#BUFFERS
lower_case_table_names=0
table_open_cache=1024
thread_cache_size=512
sysdate-is-now=1
memlock=0
skip-name-resolve
max_allowed_packet = {{ cluster.get('max_allowed_packet', '64') }}M
max_heap_table_size = 64M
tmp_table_size = 64M
key_buffer_size = 24M

max_connections = {{ cluster.get('max_connections', '100') }}

# Query Cache is not supported with wsrep
#query_cache_size=0
#query_cache_type=0

# Override bind-address
# In some systems bind-address defaults to 127.0.0.1, and with mysqldump SST
# it will have (most likely) disastrous consequences on donor node
bind-address={{ cluster.bind.address }}

##
## WSREP options
##

# Full path to wsrep provider library or 'none'
wsrep_provider=/usr/lib/galera/libgalera_smm.so

# Provider specific configuration options
wsrep_provider_options="gcache.size={{ cluster.get('gcache_size', '8192') }}M; evs.keepalive_period = PT3S; evs.suspect_timeout = PT30S; evs.inactive_timeout = PT1M; evs.install_timeout = PT1M"

# Logical cluster name. Should be the same for all nodes.
wsrep_cluster_name="my_wsrep_cluster"

# Group communication system handle
{#wsrep_cluster_address=gcomm://{% for member in cluster.members %}{% if member.host != pillar.linux.network.host.local.address %}{{ member.host}},{% endif %}{% endfor %}#}
wsrep_cluster_address=gcomm://{% for member in cluster.members %}{{ member.host}}{% if not loop.last %},{% endif %}{% endfor %}
#wsrep_cluster_address=gcomm://

# Human-readable node name (non-unique). Hostname by default.
#wsrep_node_name=

# Base replication <address|hostname>[:port] of the node.
# The values supplied will be used as defaults for state transfer receiving,
# listening ports and so on. Default: address of the first network interface.
wsrep_node_address={{ cluster.bind.address }}

# Address for incoming client connections. Autodetect by default.
#wsrep_node_incoming_address=

# How many threads will process writesets from other nodes
wsrep_slave_threads=8 #70

# DBUG options for wsrep provider
#wsrep_dbug_option

# Generate fake primary keys for non-PK tables (required for multi-master
# and parallel applying operation)
wsrep_certify_nonPK=1

# Maximum number of rows in write set
wsrep_max_ws_rows=131072

# Maximum size of write set
wsrep_max_ws_size=1073741824

# to enable debug level logging, set this to 1
wsrep_debug=0

# convert locking sessions into transactions
wsrep_convert_LOCK_to_trx=0

# how many times to retry deadlocked autocommits
wsrep_retry_autocommit=1

# change auto_increment_increment and auto_increment_offset automatically
wsrep_auto_increment_control=1

# retry autoinc insert, which failed for duplicate key error
wsrep_drupal_282555_workaround=0

# enable "strictly synchronous" semantics for read operations
wsrep_causal_reads=1

wsrep_replicate_myisam=1

# Command to call when node status or cluster membership changes.
# Will be passed all or some of the following options:
# --status  - new status of this node
# --uuid    - UUID of the cluster
# --primary - whether the component is primary or not ("yes"/"no")
# --members - comma-separated list of members
# --index   - index of this node in the list
#wsrep_notify_cmd=

##
## WSREP State Transfer options
##

# State Snapshot Transfer method
wsrep_sst_method=xtrabackup

# Address which donor should send State Snapshot to.
# Should be the address of THIS node. DON'T SET IT TO DONOR ADDRESS!!!
# (SST method dependent. Defaults to the first IP of the first interface)
#wsrep_sst_receive_address=

# SST authentication string. This will be used to send SST to joining nodes.
# Depends on SST method. For mysqldump method it is root:<root password>
#wsrep_sst_auth=root:52dcfecf27613c9f2461
wsrep_sst_auth={{ server.admin.user }}:{{ server.admin.password }}

# Desired SST donor name.
#wsrep_sst_donor=

# Reject client queries when donating SST (false)
#wsrep_sst_donor_rejects_queries=0

# Protocol version to use
# wsrep_protocol_version=
#########################################################################################################################################
{%- else %}

{%- set mysql = server %}
#
# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

# This will be passed to all mysql clients
# It has been reported that passwords should be enclosed with ticks/quotes
# escpecially if they contain "#" chars...
# Remember to edit /etc/mysql/debian.cnf when changing the socket location.

[client]
port           = {{ server.bind.get('port', '3306') }}
socket         = /var/run/mysqld/mysqld.sock

{%- if server.force_encoding is defined %}
default-character-set=utf8
{%- endif %}

{%- if server.ssl.enabled and server.replication.role in ['slave'] %}
ssl-ca=/etc/mysql/cacert.pem
ssl-cert=/etc/mysql/client-cert.pem
ssl-key=/etc/mysql/client-key.pem
{%- endif %}

# Here is entries for some specific programs
# The following values assume you have at least 32M ram

# This was formally known as [safe_mysqld]. Both versions are currently parsed.
[mysqld_safe]
socket         = /var/run/mysqld/mysqld.sock
nice           = 0

[mysqld]
#
# * Basic Settings
#
user           = mysql
pid-file       = /var/run/mysqld/mysqld.pid
socket         = /var/run/mysqld/mysqld.sock
port           = 3306
basedir        = /usr
datadir        = /var/lib/mysql
tmpdir         = /tmp
lc-messages-dir = /usr/share/mysql
skip-external-locking

{%- if server.sql_mode is defined %}
sql-mode={{ server.sql_mode }}
{%- endif %}

#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address            = {{ server.bind.address }}

{%- if server.force_encoding is defined %}
character-set-server=utf8
{%- endif %}

#
# * Fine Tuning
#
key_buffer_size        = {{ mysql.get('key_buffer', '16') }}M
max_allowed_packet     = {{ mysql.get('max_allowed_packet', '16') }}M
thread_stack           = {{ mysql.get('thread_stack', '192') }}K
thread_cache_size      = {{ mysql.get('thread_cache_size', '8') }}
# This replaces the startup script and checks MyISAM tables if needed
# the first time they are touched
myisam-recover-options = BACKUP
max_connections        = {{ mysql.get('max_connections', '100') }}
#table_cache           = 64
#thread_concurrency    = 10
#
# * Query Cache Configuration
#
query_cache_limit      = {{ mysql.get('query_cache_limit', '1') }}M
query_cache_size       = {{ mysql.get('query_cache_size', '16') }}M
#
# * Logging and Replication
#
# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
#general_log_file       = /var/log/mysql/mysql.log
#general_log            = 1
#
# Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf.
#
# log_error=/var/log/mysql.log
# log_warnings=2

# Here you can see queries with especially long duration
slow_query_log = 1
slow_query_log_file = /var/log/mysql/mysql-slow.log
long_query_time = 2
#log-queries-not-using-indexes
#
# The following can be used as easy to replay backup logs or for replication.
# note: if you are setting up a replication slave, see README.Debian about
#       other settings you may need to change.
{%- if server.replication.role in ['slave', 'master', 'both'] %}

server-id               = {{ server.server_id }}
log_bin                 = /var/log/mysql/mysql-bin.log
expire_logs_days        = 10

{%- if server.replication.role in ['both'] %}
{%- if server.replication.auto_increment is defined %}
auto_increment_increment = {{ server.replication.auto_increment.increment }}
auto_increment_offset    = {{ server.replication.auto_increment.offset }}
{%- endif %}
{%- endif %}

{%- if server.replication.role in ['slave'] %}
relay-log               = /var/log/mysql/mysql-relay-bin.log
{%- for database_name, database in server.get('database', {}).iteritems() %}
binlog_do_db           = {{ database_name }}
{%- endfor %}
{%- endif %}

{%- endif %}
max_binlog_size         = 100M
#binlog_ignore_db       = include_database_name
#
# * InnoDB
#
# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.
# Read the manual for more InnoDB related options. There are many!
#
# * Security Features
#
# Read the manual, too, if you want chroot!
# chroot = /var/lib/mysql/
#
# For generating SSL certificates I recommend the OpenSSL GUI "tinyca".
#

{%- if server.ssl.enabled and server.replication.role in ['master', 'slave', 'both', 'none'] %}
old_passwords = 1
ssl-ca=/etc/mysql/cacert.pem
ssl-cert=/etc/mysql/server-cert.pem
ssl-key=/etc/mysql/server-key.pem
{%- endif %}

[mysqldump]
quick
quote-names
max_allowed_packet      = 16M

[mysql]
#no-auto-rehash # faster start of mysql but no tab completition

[isamchk]
key_buffer_size         = 16M

#
# * IMPORTANT: Additional settings that can override those from this file!
#   The files must end with '.cnf', otherwise they'll be ignored.
#
!includedir /etc/mysql/conf.d/

{%- endif %}

[xtrabackup]
datadir=/var/lib/mysql
